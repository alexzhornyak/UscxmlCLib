char **CommandLineToArgvA(int &nArgs) {
	nArgs = ParamCount() + 1;
	char **chArgs = new char*[nArgs];
	for (int i = 0; i <= ParamCount(); i++) {
		const AnsiString sCmdArg = ParamStr(i);
		chArgs[i] = new char[sCmdArg.Length() + 1];
		strcpy(chArgs[i], sCmdArg.c_str());
	}
	return chArgs;
}

void FreeCmdArgvA(char **chArgs, const int nArgs) {
	for (int i = 0; i < nArgs; i++) {
		delete chArgs[i];
	}
	delete[]chArgs;
}

	UsclibInterpreterOptions AInterpreterOptions;
		AInterpreterOptions.LocalMonitor = true;
		AInterpreterOptions.RemoteMonitor = true;
		AInterpreterOptions.RemoteHost = "127.0.0.1";
		AInterpreterOptions.RemotePort = 11005;
		AInterpreterOptions.CheckIssues = true;

		int nArgs;
		char **chArgs = CommandLineToArgvA(nArgs);
		try {
			if (USCLIB_SUCCESS != usclib_OpenInterpreter(&g_Interpreter, const_cast<const char**>(chArgs), nArgs, AInterpreterOptions))
				throw Exception(usclib_GetLastError());
		}
		__finally {
			FreeCmdArgvA(chArgs, nArgs);
		}

		if (USCLIB_SUCCESS != usclib_StartInterpreter(g_Interpreter, g_chScxml, true))
			throw Exception(usclib_GetLastError());

		if (USCLIB_SUCCESS != usclib_CloseInterpreter(g_Interpreter))
			throw Exception(usclib_GetLastError());
			
			
	try {
		/* initialize logging */
		const AnsiString sLogFileName = ChangeFileExt(Application->ExeName, ".log");
		if (usclib_InitLogging(sLogFileName.c_str()) != USCLIB_SUCCESS)
			throw Exception(usclib_GetLastError());

		usclib_Log(USCLIB_LOG_DEBUG, "Logging initialized!");
	}
	catch(Exception * E) {
		Memo1->Lines->Add("ERROR> " + E->Message);
	}			